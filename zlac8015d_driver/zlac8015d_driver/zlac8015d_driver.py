
from pymodbus.client.sync import ModbusSerialClient as ModbusClient # type: ignore
import numpy as np

import sys
from pathlib import Path
import os
import time 
import pymodbus
class ZLAC8015D_API:
    def __init__(self, port):
        self._port = port
        self.client = ModbusClient(method='rtu', port=self._port, baudrate=115200, # "COM3"
                                   stopbits=1,parity="N",bytesize=8,timeout=1)
        
        self.was_connected = False 
        self.last_attempt_time = 0  # ‚è≥ Th·ªùi ƒëi·ªÉm th·ª≠ k·∫øt n·ªëi l·∫ßn cu·ªëi
        self.reconnect_interval = 5  # ‚è≥ Ch·ªâ th·ª≠ k·∫øt n·ªëi l·∫°i sau 5 gi√¢y
        

        self.connected = self.client.connect()
       
        if self.connected:
            print( str(self.connected) + " ==> " + "successfully")
        else:
            print(str(self.connected) + " " + "Failed connection")
            print("Please recheck parameters again!")

        self.ID = 1
        
        ## Common
        self.CONTROL_REG = 0x200E # {0x05: emergency stop, 0x06: clear stop, 0x07: stop, 0x08: enable}
        self.OPR_MODE = 0x200D     # control mode
        self.L_ACL_TIME = 0x2080
        self.R_ACL_TIME = 0x2081
        self.L_DCL_TIME = 0x2082
        self.R_DCL_TIME = 0x2083

        # clear feedback position
        self.CLR_FB_POS = 0x2005

        ## Velocity control
        # Target velocity Range: -3000~3000r/min
        self.L_CMD_RPM = 0x2088
        self.R_CMD_RPM = 0x2089

        # Position control
        self.L_FB_POS_HI = 0x20A7

        self.POS_CONTROL_TYPE = 0x200F  # Synchronous/asynchronous control status

        # Actual velocity  unit: 0.1r/min
        self.L_FB_RPM = 0x20AB
        self.R_FB_RPM = 0x20AC



        ########################
		## Control CMDs (REG) ##
		########################

        self.EMER_STOP = 0x05 # emergency stop
        self.ALRM_CLR = 0x06 # clear default 
        self.DOWN_TIME = 0x07 # stop
        self.ENABLE = 0x08    # enable

        self.POS_SYNC = 0x10
        self.POS_L_START = 0x11
        self.POS_R_START = 0x12


        ####################
		## Operation Mode ##
		####################

        self.POS_REL_CONTROL = 1
        self.POS_ABS_CONTROL = 2
        self.VEL_CONTROL = 3

        self.ASYNC = 0
        self.SYNC = 1


        ## Troubleshooting
        self.L_FAULT = 0x20A5
        self.R_FAULT = 0x20A6

        #################
		## Fault codes ##
		#################

        self.NO_FAULT = 0x0000       # No error
        self.OVER_VOLT = 0x0001      # Over voltage
        self.UNDER_VOLT = 0x0002     # Under voltage
        self.OVER_CURR = 0x0004      # Over current
        self.OVER_LOAD = 0x0008      # Over load
        self.CURR_OUT_TOL = 0x0010   # Current out of tolerance
        self.ENCOD_OUT_TOL = 0x0020  # Encoder out of tolerance
        self.MOTOR_BAD = 0x0040      # Velocity out of tolerance
        self.REF_VOLT_ERROR = 0x0080 # Reference voltage error
        self.EEPROM_ERROR = 0x0100   # EEPROM error
        self.WALL_ERROR = 0x0200     # Hall error
        self.HIGH_TEMP = 0x0400      # Motor temperature over temperature

        self.FAULT_LIST = [self.OVER_VOLT, self.UNDER_VOLT, self.OVER_CURR, self.OVER_LOAD, self.CURR_OUT_TOL, self.ENCOD_OUT_TOL, \
					self.MOTOR_BAD, self.REF_VOLT_ERROR, self.EEPROM_ERROR, self.WALL_ERROR, self.HIGH_TEMP]
        
        ##############
		## Odometry ##
		##############

        ## 4 inches wheel
        self.travel_in_one_rev = 0.336 # distance 
        self.cpr = 4096   #15 poles 
        self.R_Wheel = 0.0535 #0.107 # meter

    
    def is_connected(self):
        """üîç Ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi v√† th·ª≠ k·∫øt n·ªëi l·∫°i n·∫øu c·∫ßn"""
        if not self.client:
            return False

        try:
            result = self.client.read_holding_registers(self.L_FAULT, 1, unit=self.ID)
            if result is not None and not result.isError():
                if not self.was_connected:
                    print("‚úÖ K·∫øt n·ªëi Modbus ƒë√£ kh√¥i ph·ª•c!")
                    self.was_connected = True
                return True
        except:
            pass

        # ‚è≥ Gi·ªõi h·∫°n s·ªë l·∫ßn th·ª≠ l·∫°i
        now = time.time()
        if self.was_connected and (now - self.last_attempt_time > self.reconnect_interval):
            print("‚ö† M·∫•t k·∫øt n·ªëi Modbus! ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i...")
            self.last_attempt_time = now
            self.was_connected = False

        if self.client.connect():
            print("‚úÖ K·∫øt n·ªëi l·∫°i Modbus th√†nh c√¥ng!")
            self.was_connected = True
            return True

        return False



    def reset_motor_after_reconnect(self):
        """üîÑ Reset tr·∫°ng th√°i ƒë·ªông c∆° sau khi k·∫øt n·ªëi l·∫°i"""
        try:
            if not self.is_connected():
                print("‚ö† M·∫•t k·∫øt n·ªëi Modbus! ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i...")
                self.client.connect()
                time.sleep(1)

            if self.is_connected():
                print("‚úÖ K·∫øt n·ªëi l·∫°i th√†nh c√¥ng! Reset tr·∫°ng th√°i ƒë·ªông c∆°...")

                for cmd, desc in [
                    (self.ALRM_CLR, "Clear Alarm"),
                    (self.ENABLE, "Enable Motor"),
                    ((0, 0), "Set RPM = 0")
                ]:
                    try:
                        if isinstance(cmd, tuple):
                            self.client.write_registers(self.L_CMD_RPM, list(cmd), unit=self.ID)
                        else:
                            self.client.write_register(self.CONTROL_REG, cmd, unit=self.ID)
                        time.sleep(0.5)
                    except Exception as e:
                        print(f"‚ùå L·ªói khi g·ª≠i l·ªánh {desc}: {str(e)}")
                        return  # ‚ùå N·∫øu l·ªói, d·ª´ng l·∫°i ngay

                print("‚úÖ ƒê·ªông c∆° ƒë√£ s·∫µn s√†ng ƒë·ªÉ ƒëi·ªÅu khi·ªÉn!")
            else:
                print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi l·∫°i. H√£y ki·ªÉm tra d√¢y k·∫øt n·ªëi ho·∫∑c ngu·ªìn!")
        except Exception as e:
            print(f"‚ùå L·ªói khi reset ƒë·ªông c∆°: {str(e)}")



    def modbus_fail_read_handler(self, ADDR, WORD, max_retries=3, delay=0.1):
        """üîç ƒê·ªçc d·ªØ li·ªáu Modbus v·ªõi t·ªëi ƒëa `max_retries` l·∫ßn th·ª≠ l·∫°i"""
        reg = [None] * WORD  # M·∫£ng ch·ª©a d·ªØ li·ªáu ƒë·ªçc ƒë∆∞·ª£c

        for attempt in range(max_retries):
            try:
                result = self.client.read_holding_registers(ADDR, WORD, unit=self.ID)

                # ‚úÖ Ki·ªÉm tra l·ªói tr∆∞·ªõc khi x·ª≠ l√Ω d·ªØ li·ªáu
                if result and not result.isError():
                    reg = result.registers  # G√°n d·ªØ li·ªáu ƒë·ªçc ƒë∆∞·ª£c
                    return reg  # ‚úÖ Th√†nh c√¥ng, tr·∫£ v·ªÅ k·∫øt qu·∫£

                print(f"‚ö†Ô∏è [Th·ª≠ l·∫ßn {attempt+1}/{max_retries}] L·ªói khi ƒë·ªçc Modbus: {result}")

            except AttributeError as e:
                print(f"‚ùå [Th·ª≠ l·∫ßn {attempt+1}/{max_retries}] AttributeError: {e}")

            except Exception as e:
                print(f"‚ùå [Th·ª≠ l·∫ßn {attempt+1}/{max_retries}] L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")

            time.sleep(delay)  # ‚è≥ Ch·ªù tr∆∞·ªõc khi th·ª≠ l·∫°i

        print(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc ƒë·ªãa ch·ªâ Modbus {ADDR} sau {max_retries} l·∫ßn th·ª≠!")
        return reg  # Tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu th·∫•t b·∫°i

    
    def rpm_to_radPerSec(self, rpm):
        return rpm*2*np.pi/60.0
    
    def get_angular_velocity(self):
        rpmL, rpmR = self.get_rpm()
        angular_L =  self.rpm_to_radPerSec(rpmL)
        angular_R = self.rpm_to_radPerSec(rpmR)
        return -angular_L, angular_R
        
    
    def rpm_to_linear(self, rpm):
        W_Wheel = self.rpm_to_radPerSec(rpm)
        V = W_Wheel*self.R_Wheel
        return V
    
    def set_mode(self, MODE):
        if MODE == 1:
            print("Set relative position mode")
        elif MODE == 2:
            print("Set absolute position mode")
        elif MODE == 3:
            print("Set velocity mode")
        else:
            print("set_mode ERROR: set only 1, 2, or 3")
            return 0
        
        result = self.client.write_register(self.OPR_MODE, MODE, unit=self.ID)
        return result

    def clear_position(self, pos):
        if pos not in [0, 1, 2, 3]:  # Ki·ªÉm tra gi√° tr·ªã h·ª£p l·ªá
            print("‚ùå set_mode POS: ch·ªâ ƒë∆∞·ª£c ƒë·∫∑t 0, 1, 2, ho·∫∑c 3")
            return False

        messages = {
            1: "‚úÖ Reset v·ªã tr√≠ encoder (Left)",
            2: "‚úÖ Reset v·ªã tr√≠ encoder (Right)",
            3: "‚úÖ Reset v·ªã tr√≠ encoder (C·∫£ hai b√™n)"
        }

        print(messages.get(pos, "‚ùå Gi√° tr·ªã pos kh√¥ng h·ª£p l·ªá"))

        try:
            # Vi·∫øt gi√° tr·ªã v√†o thanh ghi Modbus
            self.client.write_register(self.CLR_FB_POS, pos, unit=self.ID)
            return True  # Tr·∫£ v·ªÅ True n·∫øu kh√¥ng c√≥ l·ªói
        except Exception as e:
            print(f"‚ùå L·ªói khi g·ª≠i l·ªánh reset encoder: {str(e)}")
            return False  # Tr·∫£ v·ªÅ False n·∫øu c√≥ l·ªói


          


        mode = registers[0]
        return mode
    def enable_motor(self):
        result = self.client.write_register(self.CONTROL_REG, self.ENABLE, unit=self.ID)       
        
        
    def disable_motor(self):
        result = self.client.write_register(self.CONTROL_REG, self.DOWN_TIME, unit=self.ID)
    
    def emergency_stop(self):
        result = self.client.write_register(self.CONTROL_REG, self.EMER_STOP, unit=self.ID)
    def get_default(self): # Clear Alarm
        result = self.client.write_register(self.CONTROL_REG, self.ALRM_CLR, unit=self.ID)

    def get_fault_code(self):
        """üîç L·∫•y m√£ l·ªói c·ªßa ƒë·ªông c∆°, c√≥ c∆° ch·∫ø th·ª≠ l·∫°i n·∫øu ƒë·ªçc th·∫•t b·∫°i"""
        try:
            fault_codes = self.modbus_fail_read_handler(self.L_FAULT, 2)  # S·ª≠ d·ª•ng h√†m ƒë·ªçc c√≥ th·ª≠ l·∫°i

            # ‚úÖ Ki·ªÉm tra xem d·ªØ li·ªáu c√≥ h·ª£p l·ªá kh√¥ng
            if fault_codes is None or len(fault_codes) < 2:
                print("‚ö†Ô∏è L·ªói: Kh√¥ng th·ªÉ ƒë·ªçc m√£ l·ªói t·ª´ Modbus!")
                return (False, None), (False, None)  # Tr·∫£ v·ªÅ tr·∫°ng th√°i l·ªói m·∫∑c ƒë·ªãnh

            # ‚úÖ ƒê·ªçc m√£ l·ªói c·ªßa hai ƒë·ªông c∆°
            L_fault_code, R_fault_code = fault_codes[0], fault_codes[1]
            L_fault_flag, R_fault_flag = L_fault_code in self.FAULT_LIST, R_fault_code in self.FAULT_LIST

            return (L_fault_flag, L_fault_code), (R_fault_flag, R_fault_code)

        except Exception as e:
            print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi ƒë·ªçc m√£ l·ªói: {str(e)}")
            return (False, None), (False, None)  # Tr·∫£ v·ªÅ tr·∫°ng th√°i l·ªói m·∫∑c ƒë·ªãnh




    def set_accel_time(self, L_ms, R_ms):
        """üîß ƒê·∫∑t th·ªùi gian tƒÉng t·ªëc cho ƒë·ªông c∆° (ms)"""
        if not self.is_connected():
            print("‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·∫∑t th·ªùi gian tƒÉng t·ªëc: M·∫•t k·∫øt n·ªëi Modbus!")
            return

        # ‚úÖ Gi·ªõi h·∫°n gi√° tr·ªã trong kho·∫£ng h·ª£p l·ªá
        L_ms = max(0, min(32767, L_ms))
        R_ms = max(0, min(32767, R_ms))

        try:
            self.client.write_registers(self.L_ACL_TIME, [int(L_ms), int(R_ms)], unit=self.ID)
            print(f"‚úÖ Th·ªùi gian tƒÉng t·ªëc ƒë·∫∑t th√†nh c√¥ng: L={L_ms} ms, R={R_ms} ms")
        except Exception as e:
            print(f"‚ùå L·ªói khi ƒë·∫∑t th·ªùi gian tƒÉng t·ªëc: {str(e)}")

    def set_decel_time(self, L_ms, R_ms):
        """üîß ƒê·∫∑t th·ªùi gian gi·∫£m t·ªëc cho ƒë·ªông c∆° (ms)"""
        if not self.is_connected():
            print("‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·∫∑t th·ªùi gian gi·∫£m t·ªëc: M·∫•t k·∫øt n·ªëi Modbus!")
            return

        # ‚úÖ Gi·ªõi h·∫°n gi√° tr·ªã trong kho·∫£ng h·ª£p l·ªá
        L_ms = max(0, min(32767, L_ms))
        R_ms = max(0, min(32767, R_ms))

        try:
            self.client.write_registers(self.L_DCL_TIME, [int(L_ms), int(R_ms)], unit=self.ID)
            print(f"‚úÖ Th·ªùi gian gi·∫£m t·ªëc ƒë·∫∑t th√†nh c√¥ng: L={L_ms} ms, R={R_ms} ms")
        except Exception as e:
            print(f"‚ùå L·ªói khi ƒë·∫∑t th·ªùi gian gi·∫£m t·ªëc: {str(e)}")


    def get_rpm(self):
        """üìä L·∫•y t·ªëc ƒë·ªô quay c·ªßa ƒë·ªông c∆° (RPM)"""
        if not self.is_connected():
            print("‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y t·ªëc ƒë·ªô RPM: M·∫•t k·∫øt n·ªëi Modbus!")
            return 0.0, 0.0  # üö® Tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh ƒë·ªÉ tr√°nh l·ªói

        registers = self.modbus_fail_read_handler(self.L_FB_RPM, 2)

        # üîç Ki·ªÉm tra n·∫øu ƒë·ªçc d·ªØ li·ªáu th·∫•t b·∫°i
        if registers is None or len(registers) < 2:
            print("‚ùå L·ªói: Kh√¥ng th·ªÉ ƒë·ªçc RPM t·ª´ ƒë·ªông c∆°!")
            return 0.0, 0.0  # üö® Tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh ƒë·ªÉ tr√°nh l·ªói

        try:
            fb_L_rpm = np.int16(registers[0]) / 10.0
            fb_R_rpm = np.int16(registers[1]) / 10.0
            return fb_L_rpm, fb_R_rpm
        except (IndexError, TypeError) as e:
            print(f"‚ùå L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu RPM: {str(e)}")
            return 0.0, 0.0  # üö® Tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh ƒë·ªÉ tr√°nh l·ªói

    

    def set_rpm(self, L_rpm, R_rpm):
        """‚úÖ G·ª≠i l·ªánh ƒëi·ªÅu khi·ªÉn RPM, ƒë·∫£m b·∫£o th·ª≠ k·∫øt n·ªëi l·∫°i n·∫øu m·∫•t k·∫øt n·ªëi"""
        
        if not self.is_connected():  # S·ª≠ d·ª•ng is_connected() ƒë√£ s·ª≠a
            print("‚ö† Kh√¥ng th·ªÉ g·ª≠i l·ªánh RPM v√¨ Modbus ch∆∞a k·∫øt n·ªëi!")
            return  # ‚ùå Kh√¥ng g·ª≠i l·ªánh khi ch∆∞a c√≥ k·∫øt n·ªëi

        # ‚úÖ Gi·ªõi h·∫°n t·ªëc ƒë·ªô trong kho·∫£ng an to√†n
        L_rpm = max(min(L_rpm, 200), -200)
        R_rpm = max(min(R_rpm, 200), -200)

        left_bytes = self.int16Dec_to_int16Hex(L_rpm)
        right_bytes = self.int16Dec_to_int16Hex(R_rpm)

        try:
            self.client.write_registers(self.L_CMD_RPM, [left_bytes, right_bytes], unit=self.ID)
        except pymodbus.exceptions.ConnectionException as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi Modbus khi g·ª≠i set_rpm: {str(e)}")
        except Exception as e:
            print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ª≠i set_rpm: {str(e)}")



    def stop_motor_emergency(self):
        """üõë G·ª≠i l·ªánh Emergency Stop ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªông c∆° d·ª´ng ngay l·∫≠p t·ª©c"""
        try:
            if not self.is_connected():  # üîç Ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi
                self.get_logger().warn("‚ö† M·∫•t k·∫øt n·ªëi Modbus! ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i...")
                for _ in range(5):  # üîÑ Th·ª≠ l·∫°i t·ªëi ƒëa 5 l·∫ßn
                    if self.client.connect():
                        self.get_logger().info("‚úÖ K·∫øt n·ªëi l·∫°i Modbus th√†nh c√¥ng!")
                        break
                    time.sleep(0.5)  # ‚è≥ Ch·ªù 500ms r·ªìi th·ª≠ l·∫°i

            if self.is_connected():  # üîç Ch·ªâ g·ª≠i l·ªánh n·∫øu ƒë√£ k·∫øt n·ªëi l·∫°i th√†nh c√¥ng
                self.client.write_register(self.CONTROL_REG, self.EMER_STOP, unit=self.ID)
                self.get_logger().info("üõë ƒê·ªông c∆° ƒë√£ nh·∫≠n l·ªánh Emergency Stop!")
            else:
                self.get_logger().error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi l·∫°i Modbus. H√£y ki·ªÉm tra d√¢y ho·∫∑c ngu·ªìn!")

        except Exception as e:
            self.get_logger().error(f"‚ùå L·ªói khi g·ª≠i Emergency Stop: {str(e)}")





    def clear_alarm(self):
        """üõë X√≥a c·∫£nh b√°o l·ªói tr√™n b·ªô ƒëi·ªÅu khi·ªÉn"""
        if not self.is_connected():
            self.get_logger().error("‚ùå M·∫•t k·∫øt n·ªëi! Kh√¥ng th·ªÉ g·ª≠i l·ªánh clear_alarm().")
            return False

        result = self.client.write_register(self.CONTROL_REG, self.ALRM_CLR, unit=self.ID)

        if result.isError():
            self.get_logger().error("‚ùå Kh√¥ng th·ªÉ x√≥a l·ªói! Ki·ªÉm tra k·∫øt n·ªëi v√† th·ª≠ l·∫°i.")
            return False

        self.get_logger().info("‚úÖ ƒê√£ x√≥a l·ªói tr√™n b·ªô ƒëi·ªÅu khi·ªÉn.")
        return True

    
    def get_linear_velocities(self):
        """üìä L·∫•y v·∫≠n t·ªëc tuy·∫øn t√≠nh c·ªßa hai b√°nh xe (m/s)"""
        rpmL, rpmR = self.get_rpm()
        
        if rpmL is None or rpmR is None:
            self.get_logger().error("‚ùå Kh√¥ng th·ªÉ l·∫•y RPM t·ª´ ƒë·ªông c∆°.")
            return None, None

        VL = self.rpm_to_linear(rpmL)
        VR = self.rpm_to_linear(-rpmR)

        return VL, VR

    
    def map(self, val, in_min, in_max, out_min, out_max):
        """üîÑ √Ånh x·∫° gi√° tr·ªã t·ª´ ph·∫°m vi `[in_min, in_max]` sang `[out_min, out_max]`"""
        if in_min == in_max:
            self.get_logger().error("‚ùå L·ªói! Kh√¥ng th·ªÉ √°nh x·∫° khi `in_min == in_max` (chia cho 0).")
            return None

        return (val - in_min) * (out_max - out_min) / (in_max - in_min) + out_min



    def get_wheels_travelled(self):
        """üìè L·∫•y qu√£ng ƒë∆∞·ªùng ƒë√£ ƒëi c·ªßa b√°nh xe (ƒë∆°n v·ªã radian)"""
        
        registers = self.modbus_fail_read_handler(self.L_FB_POS_HI, 4)
        if registers is None or len(registers) < 4:
            self.get_logger().error("‚ùå L·ªói ƒë·ªçc d·ªØ li·ªáu v·ªã tr√≠ b√°nh xe t·ª´ Modbus!")
            return None, None

        try:
            l_pul_hi, l_pul_lo = registers[0], registers[1]
            r_pul_hi, r_pul_lo = registers[2], registers[3]

            # Gh√©p thanh ghi th√†nh gi√° tr·ªã 32-bit
            l_pulse = np.int32(((l_pul_hi & 0xFFFF) << 16) | (l_pul_lo & 0xFFFF))
            r_pulse = np.int32(((r_pul_hi & 0xFFFF) << 16) | (r_pul_lo & 0xFFFF))

            # Chuy·ªÉn ƒë·ªïi sang g√≥c quay (radian)
            l_travelled = ((float(l_pulse) / self.cpr) * self.travel_in_one_rev) / self.R_Wheel
            r_travelled = ((float(r_pulse) / self.cpr) * self.travel_in_one_rev) / self.R_Wheel

            # üîç Debug mode: ch·ªâ in ra khi c·∫ßn thi·∫øt
            # if self.debug_mode:
            #     self.get_logger().info(f"üìä l_pulse: {l_pulse} === r_pulse: {r_pulse}")
            
            return -l_travelled, r_travelled

        except OverflowError:
            self.get_logger().error("‚ùå L·ªói tr√†n s·ªë khi t√≠nh to√°n v·ªã tr√≠ b√°nh xe!")
            return None, None

    def get_wheels_tick(self):
        """üìä L·∫•y s·ªë tick t·ª´ encoder c·ªßa b√°nh xe tr√°i v√† ph·∫£i"""
        
        try:
            registers = self.modbus_fail_read_handler(self.L_FB_POS_HI, 4)
            if registers is None or len(registers) < 4:
                self.get_logger().error("‚ùå L·ªói ƒë·ªçc d·ªØ li·ªáu encoder t·ª´ Modbus!")
                return None, None

            l_pul_hi, l_pul_lo = registers[0], registers[1]
            r_pul_hi, r_pul_lo = registers[2], registers[3]

            # Gh√©p thanh ghi th√†nh gi√° tr·ªã 32-bit
            l_tick = np.int32(((l_pul_hi & 0xFFFF) << 16) | (l_pul_lo & 0xFFFF))
            r_tick = np.int32(((r_pul_hi & 0xFFFF) << 16) | (r_pul_lo & 0xFFFF))

            return l_tick, r_tick

        except OverflowError:
            self.get_logger().error("‚ùå L·ªói tr√†n s·ªë khi ƒë·ªçc encoder tick!")
            return None, None

        except IndexError:
            self.get_logger().error("‚ùå D·ªØ li·ªáu Modbus tr·∫£ v·ªÅ kh√¥ng ƒë·ªß ph·∫ßn t·ª≠!")
            return None, None


    def set_position_async_control(self):
        """‚úÖ ƒê·∫∑t ch·∫ø ƒë·ªô ƒëi·ªÅu khi·ªÉn v·ªã tr√≠ kh√¥ng ƒë·ªìng b·ªô"""
        try:
            result = self.client.write_register(self.POS_CONTROL_TYPE, self.ASYNC, unit=self.ID)
            self.get_logger().info("‚úÖ ƒê√£ ƒë·∫∑t ch·∫ø ƒë·ªô ASYNC cho ƒë·ªông c∆°.")
            return result
        except Exception as e:
            self.get_logger().error(f"‚ùå L·ªói khi ƒë·∫∑t ch·∫ø ƒë·ªô ASYNC: {str(e)}")
            return None


    def move_left_wheel(self):
        """‚úÖ G·ª≠i l·ªánh di chuy·ªÉn b√°nh xe tr√°i"""
        try:
            result = self.client.write_register(self.CONTROL_REG, self.POS_L_START, unit=self.ID)
            self.get_logger().info("‚úÖ ƒê√£ g·ª≠i l·ªánh di chuy·ªÉn b√°nh xe tr√°i.")
            return result
        except Exception as e:
            self.get_logger().error(f"‚ùå L·ªói khi g·ª≠i l·ªánh di chuy·ªÉn b√°nh xe tr√°i: {str(e)}")
            return None

    

    def int16Dec_to_int16Hex(self, int16):
        """‚úÖ Chuy·ªÉn ƒë·ªïi s·ªë nguy√™n 16-bit t·ª´ d·∫°ng th·∫≠p ph√¢n sang hex"""
        try:
            int16 = np.int16(int16)  # ƒê·∫£m b·∫£o gi√° tr·ªã h·ª£p l·ªá
            lo_byte = int16 & 0x00FF
            hi_byte = (int16 & 0xFF00) >> 8
            return (hi_byte << 8) | lo_byte
        except Exception as e:
            self.get_logger().error(f"‚ùå L·ªói khi chuy·ªÉn ƒë·ªïi s·ªë: {str(e)}")
            return None


    def close_connect(self):
        """‚úÖ ƒê√≥ng k·∫øt n·ªëi Modbus"""
        try:
            if self.client:
                self.client.close()
                self.get_logger().info("‚úÖ ƒê√£ ƒë√≥ng k·∫øt n·ªëi Modbus.")
            else:
                self.get_logger().warn("‚ö† Kh√¥ng c√≥ k·∫øt n·ªëi Modbus ƒë·ªÉ ƒë√≥ng.")
        except Exception as e:
            self.get_logger().error(f"‚ùå L·ªói khi ƒë√≥ng k·∫øt n·ªëi Modbus: {str(e)}")

    def is_motor_enabled(self):
        """‚úÖ Ki·ªÉm tra xem ƒë·ªông c∆° c√≥ ƒëang ·ªü tr·∫°ng th√°i `enable` hay kh√¥ng"""
        try:
            registers = self.modbus_fail_read_handler(self.CONTROL_REG, 1)
            if registers is None:
                self.get_logger().warn("‚ö† Kh√¥ng th·ªÉ ki·ªÉm tra tr·∫°ng th√°i ƒë·ªông c∆°!")
                return False
            return registers[0] == self.ENABLE
        except Exception as e:
            self.get_logger().error(f"‚ùå L·ªói khi ki·ªÉm tra tr·∫°ng th√°i ƒë·ªông c∆°: {str(e)}")
            return False


    def get_motor_status(self):
        """üìä L·∫•y t·∫•t c·∫£ th√¥ng tin v·ªÅ ƒë·ªông c∆° (c√≥ x·ª≠ l√Ω l·ªói)"""
        try:
            return {
                "connected": self.is_connected(),
                "enabled": self.is_motor_enabled(),
                "mode": self.get_mode() if self.is_connected() else None,
                "rpm": self.get_rpm() if self.is_connected() else (None, None),
                "linear_velocity": self.get_linear_velocities() if self.is_connected() else (None, None),
                "position": self.get_wheels_travelled() if self.is_connected() else (None, None),
                "fault": self.get_fault_code() if self.is_connected() else (None, None),
            }
        except Exception as e:
            self.get_logger().error(f"‚ùå L·ªói khi l·∫•y tr·∫°ng th√°i ƒë·ªông c∆°: {str(e)}")
            return None
        
    def get_battery_voltage(self):
        """üîã ƒê·ªçc ƒëi·ªán √°p bus (battery voltage) t·ª´ driver"""
        try:
            registers = self.client.read_holding_registers(0x20A1, 1, unit=self.ID)
            if registers.isError():
                print("‚ùå L·ªói khi ƒë·ªçc ƒëi·ªán √°p bus!")
                return None
            voltage = registers.registers[0] * 0.01  # Quy ƒë·ªïi v·ªÅ ƒë∆°n v·ªã V
            print(f"üîã ƒêi·ªán √°p bus: {voltage}V")
            return voltage
        except Exception as e:
            print(f"‚ùå L·ªói khi ƒë·ªçc ƒëi·ªán √°p bus: {str(e)}")
            return None


    def get_mode(self):
        """üìå L·∫•y ch·∫ø ƒë·ªô ƒëi·ªÅu khi·ªÉn hi·ªán t·∫°i"""
        try:
            registers = self.modbus_fail_read_handler(self.OPR_MODE, 1)
            return registers[0] if registers else None
        except Exception as e:
            print(f"‚ùå L·ªói khi ƒë·ªçc ch·∫ø ƒë·ªô ƒëi·ªÅu khi·ªÉn: {e}")
            return None
        
    def get_brake_state(self):
        """üõë Ki·ªÉm tra tr·∫°ng th√°i phanh"""
        try:
            result = self.client.read_holding_registers(0x201A, 1, unit=self.ID)
            if result and not result.isError():
                return "Closed" if result.registers[0] == 1 else "Open"
        except Exception as e:
            print(f"‚ùå L·ªói khi ƒë·ªçc tr·∫°ng th√°i phanh: {str(e)}")
        return None

        
    """
    Hai h√†m n√†y d√πng ƒë·ªÉ ki·ªÉm tra l·ªói c·ªßa ƒë·ªông c∆° tr√°i/ph·∫£i b·∫±ng c√°ch ƒë·ªçc d·ªØ li·ªáu t·ª´ self.L_FAULT (0x20A5) v√† self.R_FAULT (0x20A6).
    N·∫øu ƒë·ªông c∆° g·∫∑p l·ªói, n√≥ s·∫Ω tr·∫£ v·ªÅ m√£ l·ªói t∆∞∆°ng ·ª©ng.

    C√°c l·ªói c√≥ th·ªÉ g·∫∑p:
        0x0001 - Over Voltage (Qu√° √°p)
        0x0002 - Under Voltage (D∆∞·ªõi √°p)
        0x0004 - Over Current (Qu√° d√≤ng)
        0x0008 - Over Load (Qu√° t·∫£i)
        0x0010 - Current Out of Tolerance (D√≤ng ƒëi·ªán kh√¥ng ·ªïn ƒë·ªãnh)
        0x0020 - Encoder Error (L·ªói encoder)
        0x0040 - Motor Bad (L·ªói ƒë·ªông c∆°)
        0x0080 - Reference Voltage Error (L·ªói ƒëi·ªán √°p tham chi·∫øu)
        0x0100 - EEPROM Error (L·ªói EEPROM)
        0x0200 - Hall Sensor Error (L·ªói c·∫£m bi·∫øn Hall)
        0x0400 - Motor Over Temperature (Qu√° nhi·ªát)

    """

    def troubleshooting_left(self):
        """üîç Ki·ªÉm tra l·ªói ƒë·ªông c∆° tr√°i"""
        try:
            registers = self.modbus_fail_read_handler(self.L_FAULT, 12)
            if registers:
                return registers
            else:
                return None
        except Exception as e:
            print(f"‚ùå L·ªói khi ki·ªÉm tra ƒë·ªông c∆° tr√°i: {e}")
            return None


    def troubleshooting_right(self):
        """üîç Ki·ªÉm tra l·ªói ƒë·ªông c∆° ph·∫£i"""
        try:
            registers = self.modbus_fail_read_handler(self.R_FAULT, 12)
            if registers:
                return registers
            else:
                return None
        except Exception as e:
            print(f"‚ùå L·ªói khi ki·ªÉm tra ƒë·ªông c∆° ph·∫£i: {e}")
            return None


    def get_motor_faults(self):
        """üö® L·∫•y m√£ l·ªói ƒë·ªông c∆° tr√°i/ph·∫£i"""
        try:
            result = self.client.read_holding_registers(0x20A5, 2, unit=self.ID)
            if result and not result.isError():
                L_fault = result.registers[0]
                R_fault = result.registers[1]
                return L_fault, R_fault
        except Exception as e:
            print(f"‚ùå L·ªói khi ƒë·ªçc tr·∫°ng th√°i l·ªói: {str(e)}")
        return None, None
    
    def get_motor_temperature(self):
        """üå°Ô∏è ƒê·ªçc nhi·ªát ƒë·ªô ƒë·ªông c∆°"""
        try:
            result = self.client.read_holding_registers(0x20A4, 1, unit=self.ID)
            if result and not result.isError():
                temp = result.registers[0]  # ƒê∆°n v·ªã 1¬∞C
                return temp
        except Exception as e:
            print(f"‚ùå L·ªói khi ƒë·ªçc nhi·ªát ƒë·ªô ƒë·ªông c∆°: {str(e)}")
        return None

    def get_driver_temperature(self):
        """üå°Ô∏è ƒê·ªçc nhi·ªát ƒë·ªô driver"""
        try:
            result = self.client.read_holding_registers(0x20B0, 1, unit=self.ID)
            if result and not result.isError():
                temp = result.registers[0] * 0.1  # ƒê∆°n v·ªã 0.1¬∞C
                return temp
        except Exception as e:
            print(f"‚ùå L·ªói khi ƒë·ªçc nhi·ªát ƒë·ªô driver: {str(e)}")
        return None
